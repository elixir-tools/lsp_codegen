# codegen: do not edit
defmodule GenLSP.Requests.<%= LSPCodegen.Naming.name(@request) %> do<%= if @request.documentation do %>
  @moduledoc """
  <%= String.replace(@request.documentation, "\n", "\n  ") %>

  Message Direction: <%= @request.message_direction %>
  """<% end %>

  import Schematic, warn: false

  use TypedStruct

  @derive Jason.Encoder
  typedstruct do
    field :method, String.t(), default: "<%= @request.method %>"
    field :jsonrpc, String.t(), default: "2.0"
    field :id, integer(), enforce: true
    field :params, <%= LSPCodegen.Codegen.to_string(@params, @metamodel) %>
  end

  @type result :: <%= LSPCodegen.Codegen.to_string(@request.result, @metamodel) %>

  @doc false
  @spec schematic() :: Schematic.t()
  def schematic() do
    schema(__MODULE__, %{
      method: str("<%= @request.method %>"),
      jsonrpc: str("2.0"),
      id: int(),
      params: <%= LSPCodegen.Schematic.to_string(@params, @metamodel) %>
    })
  end

  @doc false
  @spec result() :: Schematic.t()
  def result() do
    <%= LSPCodegen.Schematic.to_string(@request.result, @metamodel) %>
  end
end
